bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# set-option

# Enable native Mac OS X copy/paste
# set -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"

set -g allow-passthrough on

set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

set -g history-limit 50000
set -g default-command "exec /usr/bin/env bash"
set -g prefix C-t
# display 'Activity on' message
# set -g visual-activity on
set -g base-index 1

# Allow the arrow key to be used immediately after changing windows
set -g repeat-time 0

set -g escape-time 50
set -g focus-events on

# set -g default-terminal screen-256color
# set -ga terminal-overrides ',screen-256color:Tc'
set -g default-terminal xterm-256color
# set -g default-terminal tmux-256color
# set -ga terminal-overrides ",alacritty:RGB,xterm-256color:Tc"
# set -ga terminal-overrides ",alacritty:RGB,screen-256color:Tc"
set -ga terminal-overrides "*:RGB"
# if-shell '[ "$TERMINAL" = "alacritty" ]' ' \
#     set -g default-terminal alacritty; \
#     set -ga terminal-overrides ",alacritty:RGB"'

set -g allow-rename off
set -g renumber-windows on
set -g automatic-rename on
set -g automatic-rename-format '#{b;=20:pane_current_path}'

set -g status-position top
set -g status-interval 1
set -g status-style fg=default
set -g status-left '#(~/.tmux/status_left.sh)'
set -g status-left-length 16
# set -g status-right '%a, %l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d #[fg=default]| #(~/.tmux/status_right.sh)'
set -g status-right '#(~/.tmux/status_right.sh)'
set -g status-right-length 32

set -g mode-style "bg=brightblack"

set -g pane-active-border-style fg=magenta
set -g pane-border-style fg=red


# set-window-option
setw -g other-pane-height 30%
setw -g other-pane-width 30%

setw -g display-panes-time 1500

setw -g window-status-current-style fg=magenta
# setw -g window-status-format ' #[fg=default]#I:#W#F '
setw -g window-active-style fg=terminal,bg=terminal
setw -g window-style fg=terminal,bg=terminal
setw -g window-status-activity-style ''

# set -g window-status-format "#{?window_activity_flag,#[fg=#ff9e64],#[fg=brightblack]}#[nobold,noitalics,nounderscore]#{?window_activity_flag,#[bg=#ff9e64],#[bg=brightblack]}#[fg=#ffffff,nobold,noitalics,nounderscore] #I: #W #[default]#{?window_activity_flag,#[fg=#ff9e64],#[fg=brightblack]}#[nobold,noitalics,nounderscore]"
set -g window-status-format "#{?window_activity_flag,#[bg=#ff9e64],#[bg=brightblack]}#[fg=#ffffff,nobold,noitalics,nounderscore] #I: #W#{?window_zoomed_flag,*Z,} #[default]"
# set -g window-status-current-format "#[fg=#737aa2]#[fg=#ffffff,bg=#737aa2,bold,noitalics,nounderscore] #I:#[fg=#ffffff,bg=#737aa2,bold,noitalics,nounderscore] #W #[default]#[fg=#737aa2,nobold,noitalics,nounderscore]"
# set -g window-status-current-format "#[fg=blue]#[fg=#ffffff,bg=blue,bold,noitalics,nounderscore] #I:#[fg=#ffffff,bg=blue,bold,noitalics,nounderscore] #W #[default]#[fg=blue,nobold,noitalics,nounderscore]"
set -g window-status-current-format "#[fg=#ffffff,bg=blue,bold,noitalics,nounderscore] #I:#[fg=#ffffff,bg=blue,bold,noitalics,nounderscore] #W#{?window_zoomed_flag,*Z,} #[default]"
set -g window-status-separator " "

set -g status-justify centre


setw -g monitor-activity on

setw -g mode-keys vi
setw -g mouse on


# bindings
unbind C-b
bind-key C-t send-prefix

bind-key -n M-M setw -g mouse\; display-message "mouse: #{?mouse,ON,OFF}"

bind-key : command-prompt
bind-key r refresh-client

bind-key [ copy-mode
bind-key ] paste-buffer
bind-key = choose-buffer

bind-key -n M-\{ copy-mode
bind-key -n M-\} paste-buffer

bind-key space next-layout

# bind-key -nT popup M-\{ copy-mode
# bind-key -nT popup M-x detach-client

bind-key -n M-/ if-shell "~/.tmux/detach.sh asciiquarium" {
    detach-client
} \; run-shell -b "~/.tmux/ctl.sh asciiquarium"

bind-key -n M-: command-prompt -p "Command:" "if-shell \"~/.tmux/detach.sh %1\" { detach-client } \; run-shell -b \"~/.tmux/ctl.sh %1\""

bind-key -n M-` if-shell "~/.tmux/detach.sh btop" {
    detach-client
} \; run-shell -b "~/.tmux/ctl.sh btop"

bind-key -n M-~ if-shell "~/.tmux/detach.sh wtfutil" {
    detach-client
} \; run-shell -b "~/.tmux/ctl.sh wtfutil"

bind-key -n M-enter if-shell "~/.tmux/detach.sh bash" {
    detach-client
} \; run-shell -b "~/.tmux/ctl.sh bash"

# bind-key -n M-~ popup -E -d "#{pane_current_path}" -w 80% -h 80% "~/.tmux/pup.sh bash 2>/tmp/puperr.log"
# bind-key -n M-` popup -E -d "#{pane_current_path}" -w 80% -h 80% "~/.tmux/pup.sh btop 2>/tmp/puperr.log"
# bind-key -n M-~ popup -E -d "#{pane_current_path}" -w 80% -h 80% "~/.tmux/pup.sh bash 2>/tmp/puperr.log"
# bind-key -n M-` popup -E -d "#{pane_current_path}" -w 80% -h 80% "tmux display-message -p '#S' | grep '^wtf$' && tmux detach-client || tmux new -A -s wtf 'tmux set status && wtfutil'"
# bind-key -n M-~ popup -E -d "#{pane_current_path}" -w 80% -h 80% "tmux display-message -p '#S' | grep '^btop$' && tmux detach-client || tmux new -A -s btop 'tmux set status && btop'"
# bind-key -n M-enter popup -E -d "#{pane_current_path}" -w 66% -h 66% "tmux display-message -p '#S' | grep '^scratchpad$' && tmux detach-client || tmux new -A -s scratchpad 'tmux set status && bash'"
# bind-key -n M-space command-prompt -p "Command:" "popup -E -d \"#{pane_current_path}\" -w 66% -h 66% \"tmux new -s popup '%%'\""

bind-key S choose-tree -Zs
bind-key W choose-tree -Zw "swap-window -t '%%'"
bind-key P choose-tree -Zw "swap-pane -t '%%'"
bind-key C-p choose-tree -Zw "move-pane -t '%%'"

bind-key C-M-w command-prompt -p "Swap current window to? (e.g. 3; 4; session_name:5)  " "swap-window -t '%%'"
bind-key C-M-p command-prompt -p "Swap current pane to? (e.g. 2.0; session_name:4.0)  " "swap-pane -t '%%'"
bind-key M-p command-prompt -p "Move current pane to? (e.g. 2.1; session_name:4.0)  " "move-pane -t '%%'"
bind-key -n M-, swap-pane
bind-key -n M-m select-pane -m

bind-key -n M-< swap-window -t -1 \; previous-window
bind-key -n M-> swap-window -t +1 \; next-window

bind-key C-l send-keys 'C-l'

bind-key C-o rotate-window

bind-key u attach-session -t . -c "#{pane_current_path}"\; display-message "working directory changed: #{pane_current_path}"
bind-key y run-shell "tmux show-buffer | clip.exe" \; display-message "Copied tmux buffer to system clipboard"

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key C new-window -c "#{pane_current_path}"

bind-key -n M-c new-window
bind-key -n M-C new-window -c "#{pane_current_path}"

bind-key -n M-D detach-client

bind-key C-a setw synchronize-panes \; display-message "synchronize-panes: #{?synchronize-panes,ON,OFF}"

# use vim-like keys for splits and windows
bind-key v split-window -h
bind-key s split-window -v

bind-key -n M-v split-window -h
bind-key -n M-s split-window -v
bind-key -n M-V split-window -h -c "#{pane_current_path}"
bind-key -n M-S split-window -v -c "#{pane_current_path}"

bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key C-c command-prompt -p "New session name:" "new-session -s '%%'"

bind-key -n M-o last-window
bind-key -n M-O switch-client -l
bind-key -n M-N switch-client -n
bind-key -n M-P switch-client -p

bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R

bind-key -n M-1 select-window -t :=1
bind-key -n M-2 select-window -t :=2
bind-key -n M-3 select-window -t :=3
bind-key -n M-4 select-window -t :=4
bind-key -n M-5 select-window -t :=5
bind-key -n M-6 select-window -t :=6
bind-key -n M-7 select-window -t :=7
bind-key -n M-8 select-window -t :=8
bind-key -n M-9 select-window -t :=9
bind-key -n M-0 select-window -t :=10

bind-key -n M-left resize-pane -L
bind-key -n M-right resize-pane -R
bind-key -n M-up resize-pane -U
bind-key -n M-down resize-pane -D

bind-key -n M-H resize-pane -L
bind-key -n M-L resize-pane -R
bind-key -n M-K resize-pane -U
bind-key -n M-J resize-pane -D

# smart pane switching with awareness of vim splits
# bind-key -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim?$' && tmux send-keys C-h) || tmux select-pane -L"
# bind-key -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim?$' && tmux send-keys C-j) || tmux select-pane -D"
# bind-key -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim?$' && tmux send-keys C-k) || tmux select-pane -U"
# bind-key -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim?$' && tmux send-keys C-l) || tmux select-pane -R"
# bind-key -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"

bind-key -n M-q set status
bind-key -n M-z resize-pane -Z

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
# bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -in -sel clip' # "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi y send -X copy-pipe 'xclip -in -sel clip' # "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'xclip -in -sel clip' # "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi Enter send -X copy-pipe 'xclip -in -sel clip' # "reattach-to-user-namespace pbcopy"

bind-key -T copy-mode-vi [ send -X previous-prompt -o
bind-key -T copy-mode-vi ] send -X next-prompt -o

unbind -T copy-mode-vi MouseDragEnd1Pane

bind-key -T copy-mode-vi [ send -X previous-prompt
bind-key -T copy-mode-vi ] send -X next-prompt

# set-environment -g PATH "/usr/local/bin:/usr/bin"

# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-resurrect'

# set -g status off
